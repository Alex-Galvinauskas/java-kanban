package taskmanager.app.server.handlers;

import com.google.gson.Gson;
import org.junit.jupiter.api.*;
import taskmanager.app.entity.Epic;
import taskmanager.app.entity.StatusTask;
import taskmanager.app.entity.SubTask;
import taskmanager.app.management.TaskManager;
import taskmanager.app.server.HttpTaskServer;
import taskmanager.app.service.manager.InMemoryTaskManager;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç–ø–∏–∫–æ–≤")
class EpicsHandlerTest {
    private TaskManager manager;
    private HttpTaskServer taskServer;
    private Gson gson;
    private HttpClient client;
    private TestInfo testInfo;
    private int port;

    private static final AtomicInteger PORT_COUNTER = new AtomicInteger(8181);
    private static final String BASE_URL = "http://localhost:";

    @BeforeEach
    void setUp(TestInfo testInfo) throws IOException {
        this.testInfo = testInfo;
        this.port = PORT_COUNTER.getAndIncrement();
        this.manager = new InMemoryTaskManager();
        this.taskServer = new HttpTaskServer(manager, port);
        this.gson = taskServer.getGson();
        this.client = HttpClient.newHttpClient();

        System.out.printf("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ %s –Ω–∞ –ø–æ—Ä—Ç—É %d%n", testInfo.getDisplayName(), port);
        taskServer.start();
    }

    @AfterEach
    void tearDown() {
        if (taskServer != null) {
            taskServer.stop();
        }
        System.out.printf("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: %s%n%n", testInfo.getDisplayName());
    }

    private String getUrl(String path) {
        return BASE_URL + port + path;
    }

    @Test
    @DisplayName("–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏–∫–∞")
    void testCreateEpic() throws IOException, InterruptedException {
        // Given
        Epic epic = new Epic("Test Epic", "Test Description");
        String epicJson = gson.toJson(epic);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(epicJson))
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(201, response.statusCode(), "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏");
        List<Epic> epics = manager.getAllEpics();
        assertEquals(1, epics.size(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∫–æ–≤");
        assertEquals("Test Epic", epics.getFirst().getName(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —ç–ø–∏–∫–∞");
        assertEquals("Test Description", epics.getFirst().getDescription(),
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ø–∏–∫–∞");
        assertEquals(StatusTask.NEW, epics.getFirst().getStatus(),
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞");
    }

    @Test
    @DisplayName("–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–∏–∫–∞ –ø–æ ID")
    void testGetEpicById() throws IOException, InterruptedException {
        // Given
        Epic epic = new Epic("Epic with Subtasks", "Description");
        int epicId = manager.createEpic(epic);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/" + epicId)))
                .GET()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(200, response.statusCode());
        Epic responseEpic = gson.fromJson(response.body(), Epic.class);
        assertNotNull(responseEpic, "–≠–ø–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
        assertEquals(epicId, responseEpic.getId(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —ç–ø–∏–∫–∞");
        assertEquals("Epic with Subtasks", responseEpic.getName(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —ç–ø–∏–∫–∞");
        assertEquals("Description", responseEpic.getDescription(),
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ø–∏–∫–∞");
        assertNotNull(responseEpic.getSubTaskIds(), "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
        assertTrue(responseEpic.getSubTaskIds().isEmpty(), "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    @Test
    @DisplayName("–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–∏–∫–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏")
    void testGetEpicWithSubtasks() throws IOException, InterruptedException {
        // Given
        Epic epic = new Epic("Epic with Subtasks", "Description");
        int epicId = manager.createEpic(epic);

        SubTask subTask1 = new SubTask(manager.generateId(), "SubTask 1", "Description 1",
                StatusTask.NEW, Duration.ofMinutes(30),
                LocalDateTime.now(), epicId);
        SubTask subTask2 = new SubTask(manager.generateId(), "SubTask 2", "Description 2",
                StatusTask.IN_PROGRESS, Duration.ofMinutes(45),
                LocalDateTime.now().plusHours(1), epicId);

        manager.createSubTask(subTask1);
        manager.createSubTask(subTask2);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/" + epicId)))
                .GET()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(200, response.statusCode());
        Epic responseEpic = gson.fromJson(response.body(), Epic.class);
        assertNotNull(responseEpic);
        assertEquals(epicId, responseEpic.getId());
        assertEquals("Epic with Subtasks", responseEpic.getName());
        assertEquals(2, responseEpic.getSubTaskIds().size(), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–æ–¥–∑–∞–¥–∞—á–∏");
        assertEquals(StatusTask.IN_PROGRESS, responseEpic.getStatus(),
                "–°—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è");
    }

    @Test
    @DisplayName("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ø–∏–∫–æ–≤")
    void testGetAllEpics() throws IOException, InterruptedException {
        // Given
        manager.createEpic(new Epic("Epic 1", "Description 1"));
        manager.createEpic(new Epic("Epic 2", "Description 2"));
        manager.createEpic(new Epic("Epic 3", "Description 3"));

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .GET()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(200, response.statusCode());
        Epic[] epics = gson.fromJson(response.body(), Epic[].class);
        assertEquals(3, epics.length, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —ç–ø–∏–∫–∞");
        assertEquals("Epic 1", epics[0].getName());
        assertEquals("Epic 2", epics[1].getName());
        assertEquals("Epic 3", epics[2].getName());
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ —ç–ø–∏–∫–∞ –ø–æ ID")
    void testDeleteEpic() throws IOException, InterruptedException {
        // Given
        Epic epic = new Epic("Epic to delete", "Description");
        int epicId = manager.createEpic(epic);
        assertEquals(1, manager.getAllEpics().size());

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/" + epicId)))
                .DELETE()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(204, response.statusCode());
        assertEquals(0, manager.getAllEpics().size());
        assertTrue(manager.getEpicById(epicId).isEmpty(), "–≠–ø–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω");
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ —ç–ø–∏–∫–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏")
    void testDeleteEpicWithSubtasks() throws IOException, InterruptedException {
        // Given
        Epic epic = new Epic("Epic with subtasks", "Description");
        int epicId = manager.createEpic(epic);

        SubTask subTask = new SubTask(manager.generateId(), "SubTask", "Description",
                StatusTask.NEW, Duration.ofMinutes(30),
                LocalDateTime.now(), epicId);
        manager.createSubTask(subTask);

        assertEquals(1, manager.getAllEpics().size());
        assertEquals(1, manager.getAllSubTasks().size());

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/" + epicId)))
                .DELETE()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(204, response.statusCode());
        assertEquals(0, manager.getAllEpics().size());
        assertEquals(0, manager.getAllSubTasks().size(),
                "–ü–æ–¥–∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –≤–º–µ—Å—Ç–µ —Å —ç–ø–∏–∫–æ–º");
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ø–∏–∫–æ–≤")
    void testDeleteAllEpics() throws IOException, InterruptedException {
        // Given
        manager.createEpic(new Epic("Epic 1", "Description 1"));
        manager.createEpic(new Epic("Epic 2", "Description 2"));

        int epicId = manager.createEpic(new Epic("Epic with subtasks", "Description"));
        SubTask subTask = new SubTask(manager.generateId(), "SubTask", "Description",
                StatusTask.NEW, Duration.ofMinutes(30),
                LocalDateTime.now(), epicId);
        manager.createSubTask(subTask);

        assertEquals(3, manager.getAllEpics().size());
        assertEquals(1, manager.getAllSubTasks().size());

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .DELETE()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(204, response.statusCode());
        assertEquals(0, manager.getAllEpics().size());
        assertEquals(0, manager.getAllSubTasks().size(),
                "–í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã");
    }

    @Test
    @DisplayName("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ø–∏–∫–∞ –ø–æ ID")
    void testGetEpicByIdNotFound() throws IOException, InterruptedException {
        // Given
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/999")))
                .GET()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(404, response.statusCode());
        assertTrue(response.body().contains("–Ω–µ –Ω–∞–π–¥–µ–Ω"),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ");
    }

    @Test
    @DisplayName("–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON")
    void testCreateEpicWithInvalidJson() throws IOException, InterruptedException {
        // Given
        String invalidJson = "{ invalid json }";

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(invalidJson))
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(400, response.statusCode());
    }

    @Test
    @DisplayName("–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    void testCreateEpicWithInvalidData() throws IOException, InterruptedException {
        // Given
        String invalidEpicJson = """
            {
                "description": "Description without name"
            }
            """;

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(invalidEpicJson))
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(400, response.statusCode(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ø–∏–∫–∞")
    void testDeleteNonExistentEpic() throws IOException, InterruptedException {
        // Given
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/999")))
                .DELETE()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(404, response.statusCode());
    }

    @Test
    @DisplayName("–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–∏–∫–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID")
    void testGetEpicWithInvalidId() throws IOException, InterruptedException {
        // Given
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics/invalid")))
                .GET()
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(400, response.statusCode(), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID");
    }

    @Test
    @DisplayName("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥ –¥–ª—è —ç–ø–∏–∫–æ–≤")
    void testUnsupportedMethod() throws IOException, InterruptedException {
        // Given
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(getUrl("/epics")))
                .PUT(HttpRequest.BodyPublishers.ofString("{}"))
                .build();

        // When
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        // Then
        assertEquals(400, response.statusCode(),
                "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞");
    }
}