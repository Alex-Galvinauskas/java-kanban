package java.app.service.history;

import org.junit.jupiter.api.*;

import java.app.entity.StatusTask;
import java.app.entity.Task;
import java.app.management.HistoryManager;
import java.app.management.Managers;
import java.app.management.TaskManager;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("–¢–µ—Å—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
class InMemoryHistoryManagerTest {
    private HistoryManager historyManager;
    private TaskManager taskManager;
    private TestInfo testInfo;

    private Task task1;
    private Task task2;
    private Task task3;


    @BeforeEach
    void setUp(TestInfo testInfo) {
        this.testInfo = testInfo;
        System.out.printf("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞: %s%n", testInfo.getDisplayName());

        historyManager = new InMemoryHistoryManager();
        taskManager = Managers.getDefault();

        task1 = new Task(1, "Task 1", "Task 1 description", StatusTask.NEW);
        task2 = new Task(2, "Task 2", "Task 2 description", StatusTask.IN_PROGRESS);
        task3 = new Task(3, "Task 3", "Task 3 description", StatusTask.DONE);
    }

    @AfterEach
    void tearDown() {
        System.out.printf("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: %s%n%n", testInfo.getDisplayName());
    }

    @Test
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é")
    void testAddTaskToEmptyHistory() {
        //Given
        List<Task> emptyHistory = historyManager.getHistory();
        assertTrue(emptyHistory.isEmpty());

        //When
        historyManager.add(task1);

        //Then
        List<Task> history = historyManager.getHistory();
        assertEquals(1, history.size());
        assertEquals(task1, history.getFirst());
    }

    @Test
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á")
    void testAddMultipleTasks() {
        //Given
        List<Task> emptyHistory = historyManager.getHistory();
        assertTrue(emptyHistory.isEmpty());

        //When
        historyManager.add(task1);
        historyManager.add(task2);
        historyManager.add(task3);

        //Then
        List<Task> history = historyManager.getHistory();
        assertEquals(3, history.size());
        assertEquals(task1, history.get(0));
        assertEquals(task2, history.get(1));
        assertEquals(task3, history.get(2));
    }

    @Test
    @DisplayName("–î—É–±–ª–∏–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –≤ –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏")
    void testAdd_shouldMoveDuplicateTaskToEnd() {
        //Given
        historyManager.add(task1);
        historyManager.add(task2);

        //When
        historyManager.add(task1);

        //Then
        List<Task> history = historyManager.getHistory();
        assertEquals(2, history.size());
        assertEquals(task2, history.get(0));
        assertEquals(task1, history.get(1));
    }

    @Test
    @DisplayName("Null –∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é")
    void tetsAdd_shouldNotAddNullTask() {
        //Given & When
        historyManager.add(null);

        //Then
        assertTrue(historyManager.getHistory().isEmpty());
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    void testRemove_shouldRemoveTaskFromHistory() {
        //Given
        historyManager.add(task1);
        historyManager.add(task2);
        historyManager.add(task3);

        //When
        historyManager.remove(task2.getId());

        //Then
        List<Task> history = historyManager.getHistory();
        assertEquals(2, history.size());
        assertFalse(history.contains(task2));
        assertEquals(List.of(task1, task3), history);
    }

    @Test
    @DisplayName("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    void testRemove_shouldHandleNonExistingTask() {
        //Given
        historyManager.add(task1);

        //When
        historyManager.remove(999);

        //Then
        assertEquals(1, historyManager.getHistory().size());
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∑–∞–¥–∞—á–∏")
    void testHistoryVersions() {

        //Given
        historyManager.add(task1);
        Task firstVersion = historyManager.getHistory().getFirst();
        assertEquals(StatusTask.NEW, firstVersion.getStatus());

        //When
        task1.setStatus(StatusTask.IN_PROGRESS);
        historyManager.add(task1);

        //Then
        Task secondVersion = historyManager.getHistory().getFirst();
        assertEquals(StatusTask.IN_PROGRESS, secondVersion.getStatus());
    }

    @Test
    @DisplayName("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
    void testClear_shouldClearHistory() {
        //Given
        historyManager.add(task1);
        historyManager.add(task2);
        historyManager.add(task3);

        //When
        historyManager.clear();

        //Then
        assertTrue(historyManager.getHistory().isEmpty());
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏")
    void testGetEmptyHistory() {
        //Then
        assertTrue(historyManager.getHistory().isEmpty());
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ HistoryManager —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ getTaskById")
    void testHistoryManagerIsUsed() throws IOException {

        //Given
        taskManager.createTask(task1);

        //When
        Optional<Task> retrievedTask = taskManager.getTaskById(1);
        historyManager.add(retrievedTask.orElse(null));

        //Then
        assertTrue(retrievedTask.isPresent(), "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
        assertEquals(retrievedTask.get(), historyManager.getHistory().getFirst());
    }
}