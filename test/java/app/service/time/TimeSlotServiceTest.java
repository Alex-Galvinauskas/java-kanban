package java.app.service.time;

import org.junit.jupiter.api.*;
import java.app.entity.Task;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class TimeSlotServiceTest {

    private TimeManagerService timeManagerService;
    private Task testTask;
    private TestInfo testInfo;

    @BeforeEach
    void setUp(TestInfo testInfo) {
        this.testInfo = testInfo;
        System.out.printf("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞: %s%n", testInfo.getDisplayName());

        timeManagerService = new TimeManagerService();
        testTask = new Task(1, "Test Task", "Description", null,
                Duration.ofHours(2),
                LocalDateTime.of(2025, 9, 8, 10, 0));
    }

    @AfterEach
    void tearDown() {
        System.out.printf("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: %s%n%n", testInfo.getDisplayName());
    }

    @Nested
    @DisplayName("–¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–∞ getTimeSlotsForInterval")
    class GetTimeSlotsForIntervalTest {

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏ null –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
        void testShouldReturnEmptySetForNullParameters() {
            // When
            Set<LocalDateTime> result1 = timeManagerService.getTimeSlotsForInterval(null, null);
            Set<LocalDateTime> result2 = timeManagerService.getTimeSlotsForInterval(
                    LocalDateTime.of(2025, 9, 8, 10, 0), null);
            Set<LocalDateTime> result3 = timeManagerService.getTimeSlotsForInterval(
                    null, LocalDateTime.of(2025, 9, 8, 12, 0));

            // Then
            assertTrue(result1.isEmpty());
            assertTrue(result2.isEmpty());
            assertTrue(result3.isEmpty());
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏ start –ø–æ—Å–ª–µ end")
        void testShouldReturnEmptySetWhenStartAfterEnd() {
            // Given
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 12, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 10, 0);

            // When
            Set<LocalDateTime> result = timeManagerService.getTimeSlotsForInterval(start, end);

            // Then
            assertTrue(result.isEmpty());
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ 1 —á–∞—Å")
        void testShouldCalculateSlotsForOneHourInterval() {
            // Given
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 10, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 11, 0);

            // When
            Set<LocalDateTime> result = timeManagerService.getTimeSlotsForInterval(start, end);

            // Then
            assertEquals(5, result.size()); // 10:00, 10:15, 10:30, 10:45, 11:00
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 0)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 15)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 30)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 45)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 11, 0)));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç")
        void shouldCalculateSlotsForIntervalLessThan15Minutes() {
            // Given
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 10, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 10, 10);

            // When
            Set<LocalDateTime> result = timeManagerService.getTimeSlotsForInterval(start, end);

            // Then
            assertEquals(1, result.size());
            assertTrue(result.contains(LocalDateTime.of(2025, 9,
                    8, 10, 0)));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–µ–∑–∞—Ç—å –≤—Ä–µ–º—è –¥–æ –º–∏–Ω—É—Ç –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–ª–æ—Ç–æ–≤")
        void testShouldTruncateToMinutesWhenCalculatingSlots() {
            // Given
            LocalDateTime start = LocalDateTime.of
                    (2025, 9, 8, 10, 0, 30);
            LocalDateTime end = LocalDateTime.of
                    (2025, 9, 8, 10, 30, 45);

            // When
            Set<LocalDateTime> result = timeManagerService.getTimeSlotsForInterval(start, end);

            // Then
            assertEquals(3, result.size());
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 0)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 15)));
            assertTrue(result.contains(LocalDateTime.of
                    (2025, 9, 8, 10, 30)));
        }
    }

    @Nested
    @DisplayName("–¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–∞ isTimeSlotAvailable")
    class IsTimeSlotAvailableTest {

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –¥–ª—è null –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        void testShouldReturnTrueForNullParameters() {
            // When & Then
            assertTrue(timeManagerService.isTimeSlotAvailable(null, null));
            assertTrue(timeManagerService.isTimeSlotAvailable(LocalDateTime.now(), null));
            assertTrue(timeManagerService.isTimeSlotAvailable(null, LocalDateTime.now()));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        void testShouldReturnTrueForAvailableInterval() {
            // Given
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 10, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 12, 0);

            // When
            boolean result = timeManagerService.isTimeSlotAvailable(start, end);

            // Then
            assertTrue(result);
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        void testShouldReturnFalseForOccupiedInterval() {
            // Given
            timeManagerService.addTaskToTimeSlots(testTask);
            LocalDateTime overlappingStart = LocalDateTime.of(2025, 9, 8, 11, 0);
            LocalDateTime overlappingEnd = LocalDateTime.of(2025, 9, 8, 13, 0);

            // When
            boolean result = timeManagerService.isTimeSlotAvailable(overlappingStart, overlappingEnd);

            // Then
            assertFalse(result);
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        void testShouldReturnTrueAfterRemovingTask() {
            // Given
            timeManagerService.addTaskToTimeSlots(testTask);
            timeManagerService.removeTaskFromTimeSlots(testTask);
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 10, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 12, 0);

            // When
            boolean result = timeManagerService.isTimeSlotAvailable(start, end);

            // Then
            assertTrue(result);
        }
    }

    @Nested
    @DisplayName("–¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–∞ validateTaskTime")
    class ValidateTaskTimeTest {

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏")
        void testShouldSkipTaskWithoutTime() {
            // Given
            Task taskWithoutTime = new Task(2, "No Time Task",
                    "Description", null, null, null);

            // When & Then
            assertDoesNotThrow(() -> timeManagerService.validateTaskTime(taskWithoutTime));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É —Å null –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞")
        void testShouldSkipTaskWithNullStartTime() {
            // Given
            Task task = new Task(2, "Task", "Description",
                    null, Duration.ofHours(1), null);

            // When & Then
            assertDoesNotThrow(() -> timeManagerService.validateTaskTime(task));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É —Å null –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
        void testShouldSkipTaskWithNullDuration() {
            // Given
            Task task = new Task(2, "Task", "Description",
                    null, null, LocalDateTime.now());

            // When & Then
            assertDoesNotThrow(() -> timeManagerService.validateTaskTime(task));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
        void testShouldThrowExceptionForTimeOverlap() {
            // Given
            timeManagerService.addTaskToTimeSlots(testTask);
            Task overlappingTask = new Task(2, "Overlapping Task", "Description", null,
                    Duration.ofHours(1),
                    LocalDateTime.of(2025, 9, 8, 11, 0));

            // When & Then
            RuntimeException exception = assertThrows(RuntimeException.class,
                    () -> timeManagerService.validateTaskTime(overlappingTask));
            assertTrue(exception.getMessage().contains("–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        void testShouldAllowTaskWithoutTimeOverlap() {
            // Given
            timeManagerService.addTaskToTimeSlots(testTask);
            Task nonOverlappingTask = new Task(2, "Non-Overlapping Task",
                    "Description", null, Duration.ofHours(1),
                    LocalDateTime.of(2025, 9, 8, 13, 0));

            // When & Then
            assertDoesNotThrow(() -> timeManagerService.validateTaskTime(nonOverlappingTask));
        }
    }

    @Nested
    @DisplayName("–¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–æ–≤ addTaskToTimeSlots –∏ removeTaskFromTimeSlots")
    class AddRemoveTaskFromTimeSlotsTest {

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
        void testShouldIgnoreTaskWithoutTimeWhenAdding() {
            // Given
            Task taskWithoutTime = new Task(2, "No Time Task",
                    "Description", null, null, null);

            // When
            assertDoesNotThrow(() -> timeManagerService.addTaskToTimeSlots(taskWithoutTime));

            // Then
            assertTrue(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 12, 0)
            ));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞–¥–∞—á–∏")
        void testShouldAddAndRemoveTaskTimeSlots() {
            // Given
            LocalDateTime start = LocalDateTime.of(2025, 9, 8, 10, 0);
            LocalDateTime end = LocalDateTime.of(2025, 9, 8, 12, 0);

            // When
            timeManagerService.addTaskToTimeSlots(testTask);
            boolean afterAdd = timeManagerService.isTimeSlotAvailable(start, end);

            // Then
            assertFalse(afterAdd);

            // When
            timeManagerService.removeTaskFromTimeSlots(testTask);
            boolean afterRemove = timeManagerService.isTimeSlotAvailable(start, end);

            // Then
            assertTrue(afterRemove);
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤ –æ–¥–Ω–∏—Ö —Å–ª–æ—Ç–∞—Ö")
        void shouldHandleMultipleTasksInSameSlots() {
            // Given
            Task task1 = new Task(1, "Task 1", "Description", null,
                    Duration.ofHours(1),
                    LocalDateTime.of(2025, 9, 8, 10, 0));

            Task task2 = new Task(2, "Task 2", "Description", null,
                    Duration.ofHours(1),
                    LocalDateTime.of(2025, 9, 8, 10, 30));

            // When
            timeManagerService.addTaskToTimeSlots(task1);
            timeManagerService.addTaskToTimeSlots(task2);

            // Then
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 11, 30)
            ));

            // When
            timeManagerService.removeTaskFromTimeSlots(task1);

            // Then
            assertTrue(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 10, 29)
            ));

            //
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 30),
                    LocalDateTime.of(2025, 9, 8, 10, 31)
            ));

            //
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 30),
                    LocalDateTime.of(2025, 9, 8, 11, 30)
            ));
        }

        @Test
        @DisplayName("–î–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        void testShouldIgnoreTaskWithoutTimeWhenRemoving() {
            // Given
            Task taskWithoutTime = new Task(2, "No Time Task",
                    "Description", null, null, null);

            // When & Then
            assertDoesNotThrow(() -> timeManagerService.removeTaskFromTimeSlots(taskWithoutTime));
        }
    }

    @Nested
    @DisplayName("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    class IntegrationTests {

        @Test
        @DisplayName("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        void testFullCycleAddValidateRemove() {
            // Given
            Task task = new Task(1, "Test Task", "Description", null,
                    Duration.ofHours(2),
                    LocalDateTime.of(2025, 9, 8, 10, 0));

            // When & Then 1
            assertTrue(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 12, 0)
            ));

            // When & Then 2
            assertDoesNotThrow(() -> timeManagerService.validateTaskTime(task));

            // When & Then 3
            timeManagerService.addTaskToTimeSlots(task);
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 12, 0)
            ));

            // When & Then 4
            Task overlappingTask = new Task(2, "Overlapping", "Description", null,
                    Duration.ofHours(1),
                    LocalDateTime.of(2025, 9, 8, 11, 0));
            assertThrows(RuntimeException.class,
                    () -> timeManagerService.validateTaskTime(overlappingTask));

            // When & Then 5
            timeManagerService.removeTaskFromTimeSlots(task);
            assertTrue(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 12, 0)
            ));
        }

        @Test
        @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
        void testEdgeCaseTimeIntervals() {
            // Given
            Task task = new Task(1, "Edge Task", "Description", null,
                    Duration.ofMinutes(1), // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    LocalDateTime.of(2025, 9, 8, 10, 0));

            // When
            timeManagerService.addTaskToTimeSlots(task);

            // Then
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 10, 1)
            ));
            assertFalse(timeManagerService.isTimeSlotAvailable(
                    LocalDateTime.of(2025, 9, 8, 10, 0),
                    LocalDateTime.of(2025, 9, 8, 10, 15)
            ));
        }
    }
}